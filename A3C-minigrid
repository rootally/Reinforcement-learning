
import numpy as np
import tensorflow as tf

import gym, time, random, threading
import gym_minigrid
from keras.models import *
from keras.layers import *
from keras import backend as K
from keras import optimizers


ENV = 'MiniGrid-Empty-8x8-v0'

RUN_TIME = 300
THREADS = 4
OPTIMIZERS = 2
THREAD_DELAY = 0.001

GAMMA = 0.99

N_STEP_RETURN = 1
GAMMA_N = GAMMA ** N_STEP_RETURN

EPS_START = 0.4
EPS_STOP  = .15
EPS_STEPS = 75000

MIN_BATCH = 100
LEARNING_RATE = 1e-5

LOSS_V = .5          
LOSS_ENTROPY = .01 	

#---------
class Brain:
    train_queue = [ [], [], [], [], [] ]	
    lock_queue = threading.Lock()
    
    def __init__(self):
        self.session = tf.Session()
        K.set_session(self.session)
        K.manual_variable_initialization(True)

        self.model = self._build_model()
        self.graph = self._build_graph(self.model)

        self.session.run(tf.global_variables_initializer())
        self.default_graph = tf.get_default_graph()

        self.default_graph.finalize()

    def _build_model(self):
        l_input = Input( batch_shape=(None,7,7,3) )
        #onv_1 = Conv2D(16,(3,3), activation='relu')(l_input)
        model = Sequential()
        model.add(InputLayer(input_shape=( 7, 7, 3)))
        model.add((Conv2D(32, (3, 3), activation='relu' )))
        model.add(TimeDistributed(Flatten()))
        model.add(LSTM(128))
        model.add(Dense(256))
        l_dense = model(l_input)
        
        #lat_1 = (Flatten())(conv_1)
        #lat_1 = K.expand_dims(flat_1, axis=0)
        #print (flat_1)
        #stm_1 = LSTM(16*49)(flat_1)
        #_dense = Dense(16, activation='relu')(lstm_1)

        out_actions = Dense(NUM_ACTIONS, activation='softmax')(l_dense)
        out_value   = Dense(1, activation='linear')(l_dense)

        model = Model(inputs=[l_input], outputs=[out_actions, out_value])
        model._make_predict_function()	# have to initialize before threading
    
        return model

    def _build_graph(self, model):
        s_t = tf.placeholder(tf.float32, shape=(None, 7, 7, 3))
        a_t = tf.placeholder(tf.float32, shape=(None, NUM_ACTIONS))
        r_t = tf.placeholder(tf.float32, shape=(None, 1)) 
      
        p, v = model(s_t)
        log_prob = tf.log( tf.reduce_sum(p * a_t, axis=1, keep_dims=True) + 1e-10)
        advantage = r_t - v
                                                               
        loss_policy = - log_prob * tf.stop_gradient(advantage)
        loss_value  = LOSS_V * tf.square(advantage)
        entropy = LOSS_ENTROPY * tf.reduce_sum(p * tf.log(p + 1e-10), axis=1, keep_dims=True)
        print(loss_policy.shape)
        loss_total = tf.reduce_mean(loss_policy + loss_value)
        optimizer = tf.train.AdamOptimizer(LEARNING_RATE)
        gradients, variables = zip(*optimizer.compute_gradients(loss_total))
        gradients, _ = tf.clip_by_global_norm(gradients, 0.4)
        optimize = optimizer.apply_gradients(zip(gradients, variables))
        minimize = optimizer.minimize(loss_total)

        return s_t, a_t, r_t, minimize

    def optimize(self):
        if len(self.train_queue[0]) < MIN_BATCH:
            time.sleep(0)	# yield
            return
        
        with self.lock_queue:
            if len(self.train_queue[0]) < MIN_BATCH:	# more thread could have passed without lock
                return 									# we can't yield inside lock
            
            s, a, r, s_, s_mask = self.train_queue
            self.train_queue = [ [], [], [], [], [] ]
        
        #print (np.array(s).shape)
        
        s = np.array(s)
        a = np.array(a)
        r = np.array(r)
        s_ = np.array(s_)
        s_mask = np.array(s_mask)

        if len(s) > 5*MIN_BATCH: print("Optimizer alert! Minimizing batch of %d" % len(s))

        v = self.predict_v(s_)
        #print ("V shape " + str(v.shape[0]) + "  ")
       # print ("R shape " + str(r.shape) + "  ")
        
       # GAMMA_N = K.expand_dims(GAMMA_N, axis=)
        s_mask = np.reshape(s_mask,(v.shape[0],1))
        r = np.reshape(r,(v.shape[0],1))
       # print ("S_mask shape " + str(s_mask.shape) + "  ")
        r = r + GAMMA_N * np.multiply(v , s_mask)              # set v to 0 where s_ is terminal state
        #print ("R shape " + str(r.shape) + "  ")
        
        s_t, a_t, r_t, minimize = self.graph
        #print (r.shape)
        self.session.run(minimize, feed_dict={s_t: s, a_t: a, r_t: r})

    def train_push(self, s, a, r, s_):
        with self.lock_queue:
            self.train_queue[0].append(s)
            self.train_queue[1].append(a)
            self.train_queue[2].append(r)

            if s_ is None:
                self.train_queue[3].append(NONE_STATE)
                self.train_queue[4].append(0.)
            else:
                self.train_queue[3].append(s_)
                self.train_queue[4].append(1.)

    def predict(self, s):
        with self.default_graph.as_default():
            
            p, v = self.model.predict(s)
            return p, v

    def predict_p(self, s):
        with self.default_graph.as_default():
            p, v = self.model.predict(s)		
            return p

    def predict_v(self, s):
        with self.default_graph.as_default():
            #print (s.shape)
            p, v = self.model.predict(s)		
            return v

#---------
frames = 0
count =0
class Agent:
    def __init__(self, eps_start, eps_end, eps_steps):
        self.eps_start = eps_start
        self.eps_end   = eps_end
        self.eps_steps = eps_steps
        self.memory = []	# used for n_step return
        self.R = 0.

    def getEpsilon(self):
        if(frames >= self.eps_steps):
            return self.eps_end
        else:
            return self.eps_start + frames * (self.eps_end - self.eps_start) / self.eps_steps	# linearly interpolate

    def act(self, s):
        eps = self.getEpsilon()
        global frames; frames = frames + 1
        global count; count = count+1
        if random.random() < eps:
            return random.randint(0, NUM_ACTIONS-1)

        else:
            s = np.array([s])
            #print (s.shape)
            #s = np.reshape(s,(-1,147))
            #print (s.shape)
            p = brain.predict_p(s)[0]
            #print(p)
            # a = np.argmax(p)
            a = np.random.choice(NUM_ACTIONS, p=p)

            return a

    def train(self, s, a, r, s_):
        def get_sample(memory, n):
            s, a, _, _  = memory[0]
            _, _, _, s_ = memory[n-1]

            return s, a, self.R, s_

        a_cats = np.zeros(NUM_ACTIONS)	# turn action into one-hot representation
        a_cats[a] = 1 

        self.memory.append( (s, a_cats, r, s_) )

        self.R = ( self.R + r * GAMMA_N ) / GAMMA

        if s_ is None:
            while len(self.memory) > 0:
                n = len(self.memory)
                s, a, r, s_ = get_sample(self.memory, n)
                brain.train_push(s, a, r, s_)

                self.R = ( self.R - self.memory[0][2] ) / GAMMA
                self.memory.pop(0)		

            self.R = 0

        if len(self.memory) >= N_STEP_RETURN:
            s, a, r, s_ = get_sample(self.memory, N_STEP_RETURN)
            brain.train_push(s, a, r, s_)

            self.R = self.R - self.memory[0][2]
            self.memory.pop(0)	


class Environment(threading.Thread):
    stop_signal = False
    count=0

    def __init__(self, render=False, eps_start=EPS_START, eps_end=EPS_STOP, eps_steps=EPS_STEPS):
        threading.Thread.__init__(self)

        self.render = render
        self.env = gym.make(ENV)
        self.agent = Agent(eps_start, eps_end, eps_steps)

    def runEpisode(self):
        s = self.env.reset()

        R = 0
        while True:         
            time.sleep(THREAD_DELAY) # yield 

            if self.render: self.env.render()

            a = self.agent.act(s)
            s_, r, done, info = self.env.step(a)
            #print (s_,r)
            if done: # terminal state
                s_ = None

            self.agent.train(s, a, r, s_)

            s = s_
            R += r
            
           # print (R)
            if(R>0):
                self.count=self.count+1
                print ('Thread ' + str(threading.current_thread()) + str(count) +'/')
            
            #print (R)
            if done or self.stop_signal:
                break
    #print("Total R:", R)

    def run(self):
        while not self.stop_signal:
            self.runEpisode()

    def stop(self):
        self.stop_signal = True

#---------
class Optimizer(threading.Thread):
    stop_signal = False

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while not self.stop_signal:
            brain.optimize()

    def stop(self):
        self.stop_signal = True

#-- main
env_test = Environment(render=True, eps_start=0., eps_end=0.)
NUM_STATE = env_test.env.observation_space.shape
#print (NUM_STATE)
#NUM_STATE = 147
NUM_ACTIONS = env_test.env.action_space.n
#print (NUM_ACTIONS)
NONE_STATE = np.zeros(NUM_STATE)

brain = Brain()

envs = [Environment() for i in range(THREADS)]
opts = [Optimizer() for i in range(OPTIMIZERS)]

for o in opts:
	o.start()

for e in envs:
	e.start()

time.sleep(RUN_TIME)

for e in envs:
	e.stop()
for e in envs:
	e.join()

for o in opts:
	o.stop()
for o in opts:
	o.join()

print("Training finished")
env_test.run()
